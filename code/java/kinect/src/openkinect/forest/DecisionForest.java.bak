package openkinect.forest;

import math.*;
import common.*;

import java.util.*;
import java.math.*;

/**
 * The idea here is that this class will aggregate decision trees backed by a binary functional classifier, which
 * is, in turn, backed by a functional correlation object.
 * Each tree will classify the same set of data or vectors, but by the sheer size of the phase space of the 
 * functional correlations, each will be classifying by slightly different parameters determined by the
 * genetic algorithm.
 *
 */
public class DecisionForest implements Persistable
{

   private String                        _name;
   private int                           _forestSize;
   private int                           _splitSize;
   private int                           _treeGenomeLength = 37;
   private double                        _vectorDifference;
   private ArrayList< DecisionTreeNode > _forest;
   private String[]                      _addresses;

   /**
    *
    */
   public DecisionForest()
   {
   }

   /**
    *
    */
   public DecisionForest( String name )
   {
      _name = name;
   }

   /**
    * @param String -- name of the forest for the persistence file.
    * @param int    -- size of the forest, i.e., number of trees.
    * @param double -- the difference between distinct vectors in a class.
    * @param int    -- the number of vectors in a class to trigger a split.
    */
   public DecisionForest( String name, int n, double diff, int split )
   {
      _name             = name;
      _forestSize       = n;
      _vectorDifference = diff;
      _splitSize        = split;
      initializeForest();
   }

   /**
    *
    */
   private void initializeForest()
   {
      _forest = new ArrayList< DecisionTreeNode >();

      for( int i=0; i<_forestSize; i++ )
      {
         _forest.add( new DecisionTreeNode( ( _name + ".DT-" + i ), _vectorDifference, _splitSize ) );
      }
   }

   /**
    *
    * @param TYPE
    * @return TYPE
    */
   public BigInteger[] classify( double[] vector )
   {
      BigInteger[]     v    = new BigInteger[ _forestSize ];
      DecisionTreeNode tree = null;
      _addresses            = new String[ _forestSize ];

      for( int i=0; i<_forestSize; i++ )
      {
         tree            = _forest.get( i );
         v[ i ]          = tree.classify( vector );
         _addresses[ i ] = tree.getTreeAddress( v[ i ] );
      }

      return v;
   }

   /**
    *
    * @param TYPE
    * @return TYPE
    */
   public String[] getTreeAddress( BigInteger treeClass )
   {
      String[]         v    = new String[ _forestSize ];
      DecisionTreeNode tree = null;

      for( int i=0; i<_forestSize; i++ )
      {
         tree   = _forest.get( i );
         v[ i ] = tree.getTreeAddress( treeClass );
      }

      return v;
   }

   /**
    *
    * @param TYPE
    * @return TYPE
    */
   public String[] getTreeAddresses()
   {
      return _addresses;
   }

   /**
    *
    * @return FunctionalBinaryClassifierDAO -- The impl class of DAOBase type.
    */
   public DAOBase getDAO()
   {
      DAOBase dao = new DecisionForestDAO();

      if( getName() != null )
      {
         dao.setFileName( getName() + ".ser" );
      }

      return dao;
   }

   /**
    *
    */
   public class DecisionForestDAO extends DAOBase< DecisionForest >
   {
   }

   /**
    *
    * @param private String
    */
   public void setName( String name )
   {
      _name = name;
   }

   /**
    *
    * @return private String
    */
   public String getName()
   {
      return _name;
   }

   /**
    *
    * @param int
    */
   public void setForestSize( int forestSize )
   {
      _forestSize = forestSize;
   }

   /**
    *
    * @return int
    */
   public int getForestSize()
   {
      return _forestSize;
   }

   /**
    *
    * @param int
    */
   public void setTreeGenomeLength( int treeGenomeLength )
   {
      _treeGenomeLength = treeGenomeLength;
      for( DecisionTreeNode tree : _forest )
      {
         tree.setGenomeLength( _treeGenomeLength );
      }
   }

   /**
    *
    * @return int
    */
   public int getTreeGenomeLength()
   {
      return _treeGenomeLength;
   }

   /**
    *
    * @param TYPE
    * @return TYPE
    */
   public String toString()
   {
      String value = _name + "\n";

      value += "   Forest Size:             " + _forestSize + "\n";
      value += "   Tree Node Split Size:    " + _splitSize + "\n";
      value += "   Tree Node Genome Length: " + _treeGenomeLength + "\n";
      value += "   Tree Node Vector Diff:   " + _vectorDifference + "\n";
      value += "        Decision Tree 0:    " + _forest.get( 0 ) + "\n";

      return value;
   }

   /**
    *
    * @param TYPE
    * @return TYPE
    */
   public static void main( String[] args )
   {
      MathUtilities  mu   = new MathUtilities();
      int            n    = 20;
      int            s    = 20;

      DecisionForest root = ( DecisionForest ) ( new DecisionForest( "test-forest" ) ).getDAO().deserialize();

      if( root == null )
      {
         root = new DecisionForest( "test-forest", 3, 0.3, 5 );
      }

      for( int j=0; j<n; j++ )
      {
         double[]     vector = mu.normalize( mu.getRandomArray( s ), 1.0 );
         BigInteger[] c      = root.classify( vector );
         System.out.print( "\nTest vector " + j + " --> " );
         for( int k=0; k<c.length; k++ )
         {
            System.out.print( c[ k ] + " " );
         }
         System.out.println( "" );
      }

      try { Thread.sleep( 5000 ); } catch( InterruptedException e ) { }

      for( int j=0; j<n; j++ )
      {
         double[]     vector = mu.normalize( mu.getRandomArray( s ), 1.0 );
         BigInteger[] c      = root.classify( vector );
         System.out.print( "\nTest vector " + j + " --> " );
         for( int k=0; k<c.length; k++ )
         {
            System.out.print( c[ k ] + " " );
         }
         System.out.println( "" );
      }

      try { Thread.sleep( 5000 ); } catch( InterruptedException e ) { }

      System.out.println( "at end of tests..." );

      root.getDAO().serialize( root );
   }

}
