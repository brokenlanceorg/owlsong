<html>

	<head>
		<title>
		The Abstract Shire : Dedication to Logic : Mathematics : Fuzzy Logic
		</title>

	<link rel=StyleSheet href="Declarations.css" type="text/css">

	</head>

<body>

	<body bgcolor=black>

      <center><img src="Logic.jpg"></center>
      <img src="graybar2.gif" width=100% height=9px>

      <center>
      <table cellpadding=20 cellspacing=10 width=80%>
      <tr> 
      <td bgcolor=#222222 valign=top width=50%>
      <div class=bodyWhiteSmallJustify>
         <p>
            <span class=bodyGreenSmallJustify>[Goals of the Object Oriented Genetic Algorithm]</span>
         </p>
         <p>
             The goal of the object oriented Genetic Algorithm (OOGA) is to facilitate a rapid implementation for a specific problem. 
             It is desired that only a single interface with a few simple methods be implemented in order for the object to be 
             used in the Genetic Algorithm. 
         </p>
         <p>
            <span class=bodyGreenSmallJustify>[Details]</span>
         </p>
         <p>
            To build the OOGA, begin with the interface ‘GeneticAlgorithm’. This class will be the base interface or abstract class 
            which all instances of the Genetic Algorithm will inherit. This interface defines two methods, ‘addIndividual()’ and ‘evolve()’. 
            Method ‘addIndividual()’ takes as a parameter an object of type ‘Individual’ (which will be introduced shortly), 
            while the method ‘evolve()’ returns an object of type ‘Individual’. A client would then initialize as many ‘Individual’s 
            it would need and add them to the OOGA by passing them to the ‘addIndividual()’ method. After all the Individuals have been added to the OOGA, 
            the call to ‘evolve()’ will return the best fit Individual, which would be the solution to the particular problem.
         </p>
      </div>
      </td>

	<td bgcolor=#222222 valign=top width=50%>
      <div class=bodyWhiteSmallJustify>
         <p>
            The interface ‘Individual’ declares the following methods, ‘evaluateFitness()’: returns a long double representing the success 
            of the individual in the problem space, ‘getChromosome()’: returns the individual’s Chromosome object (defined shortly), 
            ‘clone()’: returns an object of type Individual based on the current instance, ‘setChromosome()’: takes as a parameter a 
            Chromosome object, ‘crossover()’: takes as parameter an object of type Individual and returns an object of type Individual, 
            ‘setCrossoverStrategy()’: takes as a parameter an object of type ‘CrossoverStrategy’ (defined shortly), ‘setMutationStrategy()’: 
            takes as a parameter an object of type ‘MutationStrategy’ (defined shortly).
         </p>
         <p>
            The interface Chromosome declares the following methods, ‘crossover()’: takes as a parameter an object of type Chromosome and 
            returns a Chromosome, ‘mutate()’: this method mutates the current instance, ‘getGenes()’: takes integer parameters ‘start’ and 
            ‘end’ and returns a vector containing the specified genes, ‘addGenes()’: takes as a parameter a vector, ‘getGenome()’: 
            returns the complete genome in a Vector, ‘setGenome()’: takes a Vector as a parameter,
         </p>
         <p>
         </p>
         <p>
         </p>
       </div>
       </td>
       </tr>
       </table>
       </center>


      <center>
	<table cellpadding=0 cellspacing=10 width=100%>
      <tr>
      <td>
         <div align=left>
         <a href="BWGenetic3.htm" target="Main"><img src="previous.gif" border=no></a>
         </div>
      </td>
      <td> 
      <center>
         <span class=linkTextWhite>[</span>
         <a href="BWMain.htm" target="Main"><span class=linkTextWhite>Home</span></a>
         <span class=linkTextWhite>|</span>
         <a href="BWMathematics.htm" target="Main"><span class=linkTextWhite>Mathematics</span></a>
         <span class=linkTextWhite>|</span>
         <a href="BWPhysics.htm" target="Main"><span class=linkTextWhite>Physics</span></a>
         <span class=linkTextWhite>|</span>
         <a href="BWPhilosophy.htm" target="Main"><span class=linkTextWhite>Philosophy</span></a>
         <span class=linkTextWhite>]</span>
      </center>
      </td>

      <td>
         <div align=right>
         <a href="BWGenetic5.htm" target="Main"><img src="next.gif" border=no></a>
         </div>
      </td>

      </tr>

      <tr>
      <td>
      </td>
      <td>
      <span class=footnoteRedSmall>
         <center>
         Design and Content by Brandon Benham<br>
         <a href="mailto:brandbn@attglobal.net"><img src="mailto4.gif" border=no></a>
         </center>
      </span>
      </td>
      </tr>
      </table>
      </center>


</body>


</html>
