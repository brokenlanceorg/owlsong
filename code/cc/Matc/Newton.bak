//**********************************************************************
// File		:  Newton.hpp
// Author	:  Brandon Benham
// Purpose	:  This file contains the declartions for the NewtoN
//				:	class, which solves functions, i.e., finds the zeros
//				:  of the mathematical functions.
//				:  We also encapsulate our Bisecant (the hybrid algorithm)
//				:  in this class because it is significantly easier to
//				:  implement due to the similarities between Newton and Bisecant
// Notes		:  This method should be used when the function is well-defined
//				:  and the first derivative of the function is known.
//**********************************************************************
#ifndef __NEWTON_HPP
#define __NEWTON_HPP

#include"onevar.hpp"
#include"domain.hpp"
#include"filesrc.hpp"
#include"c:\bc45\targa\targa.hpp"

//************************************************************************
// Class		:	NewtoN
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Purpose	:	Calculates the zero of a known function by using the
//				:	Newton-Raphson Method. That is, for a given root guess x_k,
//				:  x_k+1 = x_k - f(x)/f`(x)
//************************************************************************
class NewtoN
{
	protected:
		OnevariablE* Fct1TheRootEquation;	// our function object
		OnevariablE* Fct1TheDerivative;		// our derivative object
		FilesourcE* FtheOutput;					// to write out the data
		TargA* TargOutput;						// output for frac funcs
		DomaiN* DtheDomain;
		long lMax_Iterations;					// maximum iterations
		long lCurrent_Iteration;
		long lMax_Total_Iterations;
		long lTotal_Iterations;					// had to implement 'cause of recursion stack
		long double ldTolerance;				// tolerance level
		long double ldLast_Guess;				// contains x_k
		void Setup();								// usual setup routine
		long double FindRoot(long double);  // actual function that solves
		inline void SetVariable() {Fct1TheRootEquation->SetVariable(0, ldLast_Guess);
			Fct1TheDerivative->SetVariable(0, ldLast_Guess);}
		long double Eval();
		int BelowTolerance(long double);
		int IsZero(long double);
		int iIsSolved;							// to handle the c++ recursion error
		int iTargWidth;
		int iTargHeight;
		unsigned short usLog_It;
		// Bisecant data member items:
													
	public:
		NewtoN();		// Default Constructor
		~NewtoN();		// Destructor
		NewtoN(int, int, long double = 0);	// Constructor, with tolerance
		inline void SetMaxIterations(long lM) {lMax_Total_Iterations = lM;}
		inline void SetTolerance(long double ldT) {ldTolerance = ldT;}
		inline void SetEquation(int iW) {Fct1TheRootEquation->SetEquation(iW);}
		inline void SetDerivative(int iD) {Fct1TheDerivative->SetEquation(iD);}
		inline void SetEquationParams(long double ld1, long double ld2=0,
			long double ld3=0) {Fct1TheRootEquation->SetParams(ld1, ld2, ld3);}
		inline void SetDerivativeParams(long double ld1, long double ld2=0,
			long double ld3=0) {Fct1TheDerivative->SetParams(ld1, ld2, ld3);}
		inline long GetIterations() {return lCurrent_Iteration;}
		inline long GetTotalIterations() {return lTotal_Iterations;}
		void WriteToOutput(char*);  // interface to the output file
		inline int GetStatus() {return iIsSolved;}
		void SetFileLimits(int, int);
		void FractalizeIt();
		void SetDomains(long double, long double, long double, long double);
		inline void SetLogging(unsigned short usOn, int iErr = 0) {
			usLog_It = usOn; Fct1TheDerivative->SetLogging(iErr);
			Fct1TheRootEquation->SetLogging(iErr);
			} // end SetLogging
		virtual long double SolveIt(long double);	// front-end to method

}; // end class NewtoN declaration

#endif