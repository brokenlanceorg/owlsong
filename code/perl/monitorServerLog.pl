#!/usr/local/bin/perl -w

use strict;

our ( $_cell, $_node, $_server, $_lastTimestamp, $_lastPage );

#
# printUsage
#
sub printUsage
{
   print( "\nThis script will parse application server output files generated by\n" );
   print( "\nWebSphere and System.out calls.\n" );
   print( "\nUsage:\n" );
   print( "\nmonitorServerLog.pl <cell location> <node name> <server name>\n\n" );
   print( "\nExample:\n" );
   print( "\nmonitorServerLog.pl /opt/IBM/WebSphere/AppServer nadcert4 nadcert4Server01\n\n" );
   print( "\nmonitorServerLog.pl /opt/IBM/AutoFoward_WebSphere/AppServer61 appserve1 autoforward1\n\n" );
}

#
# RestoreState
#
sub restoreState
{
   my ( $fileName );
   $fileName = $_cell . "/profiles/" . $_node . "/logs/" . $_server . "/.monitor.state.txt";
   if( open( THE_FILE, "<$fileName" ) )
   {
      $_lastTimestamp = <THE_FILE>;
      chomp( $_lastTimestamp );
      $_lastPage = <THE_FILE>;
      chomp( $_lastPage );
   }
   else
   {
      $_lastTimestamp = 0;
      $_lastPage = 0;
   }
   close( THE_FILE );
   print( "The config items are last time: $_lastTimestamp last page: $_lastPage\n" );
}

#
# SaveState
#
sub saveState
{
   my ( $fileName );
   $fileName = $_cell . "/profiles/" . $_node . "/logs/" . $_server . "/.monitor.state.txt";
   if( open( THE_FILE, ">$fileName" ) )
   {
      print( THE_FILE $_lastTimestamp . "\n" );
      print( THE_FILE $_lastPage . "\n" );
   }
   else
   {
      print( "Unable to save the state! Last known values are:\n" );
      print( "last timestamp: $_lastTimestamp last page: $_lastPage\n" );
   }
   close( THE_FILE );
}

#
# ParseFiles
#
sub parseFiles
{
   my ( $fileName, $date, $time, $hour, $minute, $second, $month, $day, $timestamp );

   $fileName = $_cell . "/profiles/" . $_node . "/logs/" . $_server . "/SystemOut.log";

   print( "Will parse log file: $fileName \n " );

   open( THE_FILE, "<$fileName" ) or die( "Unable to open the file!!!! $!" );

   while( <THE_FILE> )
   {
      if( "$_" =~ m/^\[[1-9]/ )
      {
         $time = (split( "]", $_ ))[0];
         $time =~ s/\[//g;
         $date = (split( " ", $time ))[0];
         $time = (split( " ", $time ))[1];
         $hour = (split( ":", $time ))[0];
         $minute = (split( ":", $time ))[1];
         $second = (split( ":", $time ))[2];
         $month = (split( "/", $date ))[0];
         $day = (split( "/", $date ))[1];
         $timestamp = (2678400 * $month) + (86400 * $day) + (60 * 60 * $hour) + (60 * $minute) + $second; 
         #print( "timestamp is: $timestamp \n" );
      }

      #
      # Now check line for errors
      #
      if( $timestamp > $_lastTimestamp )
      {
         if( $_ =~ m/Timeout/ )
         {
            if( $_ !~ m/m_asyncTimeoutValue/ )
            {
               handleError( $_, $timestamp );
            }
         }
         elsif( $_ =~ m/timed out/ )
         {
            handleError( $_, $timestamp );
         }
         elsif( $_ =~ m/UnsatisfiedLinkError/ )
         {
            handleError( $_, $timestamp );
         }
         elsif( $_ =~ m/may be hung/ )
         {
            if( $_ !~ m/are [0-5] thread/ )
            {
               handleError( $_, $timestamp );
            }
         }
      }
   }
   close( THE_FILE );
   $_lastTimestamp = $timestamp;

}

#
# handleError -- will send page if required.
#
sub handleError
{
   my ( $line, $timestamp );

   $line = $_[0];
   $timestamp = $_[1];

   #
   # Check to see if this occurrence is more than 
   # an hour since the last page. If so, then
   # we can think about paging.
   #
   if( $timestamp > ( $_lastPage + ( 60 * 60 ) ) )
   {
      sendEmail( "There is a potential system issue on node: " . $_node . " and server: " . $_server . 
        "the error from the SystemOut is: " . $line );
      $_lastPage = $timestamp;
   }
}

#
# The function that sends the email and page.
#
sub sendEmail
{
   my $text = $_[0];

   print( "will send an email $text" );

   my $to=`cat $ENV{ HOME }/config/recipPID.txt`;
   chomp( $to );
   my $from="no\-reply\@aa\.com";
   my $myClasspath = $ENV{ HOME } . "/lib/j2ee.jar:" . $ENV{ HOME } . "/lib";
   my $command = "java -classpath $myClasspath PostMail -t $to -f $from -s \"System Error\" \"$text\"";

   print( "will execute: $command\n" );

   #`$command`;
}

#
# Set global variables
#
$_cell = $ARGV[0];
$_node = $ARGV[1];
$_server = $ARGV[2];

restoreState();
parseFiles();
saveState();
